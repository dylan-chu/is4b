// Code generated by protoc-gen-go. DO NOT EDIT.
// source: proto/facilitiesReservation.proto

/*
Package facilities is a generated protocol buffer package.

It is generated from these files:
	proto/facilitiesReservation.proto

It has these top-level messages:
	MeetingRoom
	MeetingRoomReservation
	ReserveMeetingRoomEvent
	ListMeetingRoomReservationsEvent
	FindAvailableMeetingRoomsEvent
	ConfirmationEvent
*/
package facilities

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type MeetingRoom struct {
	Id                int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	BuildingId        int32  `protobuf:"varint,2,opt,name=buildingId" json:"buildingId,omitempty"`
	Floor             int32  `protobuf:"varint,3,opt,name=floor" json:"floor,omitempty"`
	Name              string `protobuf:"bytes,4,opt,name=name" json:"name,omitempty"`
	Capacity          int32  `protobuf:"varint,5,opt,name=capacity" json:"capacity,omitempty"`
	HasProjector      bool   `protobuf:"varint,6,opt,name=hasProjector" json:"hasProjector,omitempty"`
	HasWhiteboard     bool   `protobuf:"varint,7,opt,name=hasWhiteboard" json:"hasWhiteboard,omitempty"`
	HasConferenceLine bool   `protobuf:"varint,8,opt,name=hasConferenceLine" json:"hasConferenceLine,omitempty"`
}

func (m *MeetingRoom) Reset()                    { *m = MeetingRoom{} }
func (m *MeetingRoom) String() string            { return proto.CompactTextString(m) }
func (*MeetingRoom) ProtoMessage()               {}
func (*MeetingRoom) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *MeetingRoom) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *MeetingRoom) GetBuildingId() int32 {
	if m != nil {
		return m.BuildingId
	}
	return 0
}

func (m *MeetingRoom) GetFloor() int32 {
	if m != nil {
		return m.Floor
	}
	return 0
}

func (m *MeetingRoom) GetName() string {
	if m != nil {
		return m.Name
	}
	return ""
}

func (m *MeetingRoom) GetCapacity() int32 {
	if m != nil {
		return m.Capacity
	}
	return 0
}

func (m *MeetingRoom) GetHasProjector() bool {
	if m != nil {
		return m.HasProjector
	}
	return false
}

func (m *MeetingRoom) GetHasWhiteboard() bool {
	if m != nil {
		return m.HasWhiteboard
	}
	return false
}

func (m *MeetingRoom) GetHasConferenceLine() bool {
	if m != nil {
		return m.HasConferenceLine
	}
	return false
}

type MeetingRoomReservation struct {
	Id            int32  `protobuf:"varint,1,opt,name=id" json:"id,omitempty"`
	UserId        int32  `protobuf:"varint,2,opt,name=userId" json:"userId,omitempty"`
	MeetingRoomId int32  `protobuf:"varint,3,opt,name=meetingRoomId" json:"meetingRoomId,omitempty"`
	StartTime     string `protobuf:"bytes,4,opt,name=startTime" json:"startTime,omitempty"`
	EndTime       string `protobuf:"bytes,5,opt,name=endTime" json:"endTime,omitempty"`
	TimeReserved  string `protobuf:"bytes,6,opt,name=timeReserved" json:"timeReserved,omitempty"`
}

func (m *MeetingRoomReservation) Reset()                    { *m = MeetingRoomReservation{} }
func (m *MeetingRoomReservation) String() string            { return proto.CompactTextString(m) }
func (*MeetingRoomReservation) ProtoMessage()               {}
func (*MeetingRoomReservation) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *MeetingRoomReservation) GetId() int32 {
	if m != nil {
		return m.Id
	}
	return 0
}

func (m *MeetingRoomReservation) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *MeetingRoomReservation) GetMeetingRoomId() int32 {
	if m != nil {
		return m.MeetingRoomId
	}
	return 0
}

func (m *MeetingRoomReservation) GetStartTime() string {
	if m != nil {
		return m.StartTime
	}
	return ""
}

func (m *MeetingRoomReservation) GetEndTime() string {
	if m != nil {
		return m.EndTime
	}
	return ""
}

func (m *MeetingRoomReservation) GetTimeReserved() string {
	if m != nil {
		return m.TimeReserved
	}
	return ""
}

type ReserveMeetingRoomEvent struct {
	UserId        int32  `protobuf:"varint,1,opt,name=userId" json:"userId,omitempty"`
	MeetingRoomId int32  `protobuf:"varint,2,opt,name=meetingRoomId" json:"meetingRoomId,omitempty"`
	StartTime     string `protobuf:"bytes,3,opt,name=startTime" json:"startTime,omitempty"`
	EndTime       string `protobuf:"bytes,4,opt,name=endTime" json:"endTime,omitempty"`
}

func (m *ReserveMeetingRoomEvent) Reset()                    { *m = ReserveMeetingRoomEvent{} }
func (m *ReserveMeetingRoomEvent) String() string            { return proto.CompactTextString(m) }
func (*ReserveMeetingRoomEvent) ProtoMessage()               {}
func (*ReserveMeetingRoomEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *ReserveMeetingRoomEvent) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ReserveMeetingRoomEvent) GetMeetingRoomId() int32 {
	if m != nil {
		return m.MeetingRoomId
	}
	return 0
}

func (m *ReserveMeetingRoomEvent) GetStartTime() string {
	if m != nil {
		return m.StartTime
	}
	return ""
}

func (m *ReserveMeetingRoomEvent) GetEndTime() string {
	if m != nil {
		return m.EndTime
	}
	return ""
}

type ListMeetingRoomReservationsEvent struct {
	UserId        int32 `protobuf:"varint,1,opt,name=userId" json:"userId,omitempty"`
	MeetingRoomId int32 `protobuf:"varint,2,opt,name=meetingRoomId" json:"meetingRoomId,omitempty"`
}

func (m *ListMeetingRoomReservationsEvent) Reset()         { *m = ListMeetingRoomReservationsEvent{} }
func (m *ListMeetingRoomReservationsEvent) String() string { return proto.CompactTextString(m) }
func (*ListMeetingRoomReservationsEvent) ProtoMessage()    {}
func (*ListMeetingRoomReservationsEvent) Descriptor() ([]byte, []int) {
	return fileDescriptor0, []int{3}
}

func (m *ListMeetingRoomReservationsEvent) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *ListMeetingRoomReservationsEvent) GetMeetingRoomId() int32 {
	if m != nil {
		return m.MeetingRoomId
	}
	return 0
}

type FindAvailableMeetingRoomsEvent struct {
	UserId    int32  `protobuf:"varint,1,opt,name=userId" json:"userId,omitempty"`
	StartTime string `protobuf:"bytes,3,opt,name=startTime" json:"startTime,omitempty"`
	EndTime   string `protobuf:"bytes,4,opt,name=endTime" json:"endTime,omitempty"`
}

func (m *FindAvailableMeetingRoomsEvent) Reset()                    { *m = FindAvailableMeetingRoomsEvent{} }
func (m *FindAvailableMeetingRoomsEvent) String() string            { return proto.CompactTextString(m) }
func (*FindAvailableMeetingRoomsEvent) ProtoMessage()               {}
func (*FindAvailableMeetingRoomsEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *FindAvailableMeetingRoomsEvent) GetUserId() int32 {
	if m != nil {
		return m.UserId
	}
	return 0
}

func (m *FindAvailableMeetingRoomsEvent) GetStartTime() string {
	if m != nil {
		return m.StartTime
	}
	return ""
}

func (m *FindAvailableMeetingRoomsEvent) GetEndTime() string {
	if m != nil {
		return m.EndTime
	}
	return ""
}

type ConfirmationEvent struct {
	ReturnCode    int32  `protobuf:"varint,1,opt,name=returnCode" json:"returnCode,omitempty"`
	StatusMessage string `protobuf:"bytes,2,opt,name=statusMessage" json:"statusMessage,omitempty"`
}

func (m *ConfirmationEvent) Reset()                    { *m = ConfirmationEvent{} }
func (m *ConfirmationEvent) String() string            { return proto.CompactTextString(m) }
func (*ConfirmationEvent) ProtoMessage()               {}
func (*ConfirmationEvent) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *ConfirmationEvent) GetReturnCode() int32 {
	if m != nil {
		return m.ReturnCode
	}
	return 0
}

func (m *ConfirmationEvent) GetStatusMessage() string {
	if m != nil {
		return m.StatusMessage
	}
	return ""
}

func init() {
	proto.RegisterType((*MeetingRoom)(nil), "facilities.MeetingRoom")
	proto.RegisterType((*MeetingRoomReservation)(nil), "facilities.MeetingRoomReservation")
	proto.RegisterType((*ReserveMeetingRoomEvent)(nil), "facilities.ReserveMeetingRoomEvent")
	proto.RegisterType((*ListMeetingRoomReservationsEvent)(nil), "facilities.ListMeetingRoomReservationsEvent")
	proto.RegisterType((*FindAvailableMeetingRoomsEvent)(nil), "facilities.FindAvailableMeetingRoomsEvent")
	proto.RegisterType((*ConfirmationEvent)(nil), "facilities.ConfirmationEvent")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for FacilitiesReservation service

type FacilitiesReservationClient interface {
	ReserveMeetingRoom(ctx context.Context, in *ReserveMeetingRoomEvent, opts ...grpc.CallOption) (*ConfirmationEvent, error)
	ListMeetingRoomReservations(ctx context.Context, in *ListMeetingRoomReservationsEvent, opts ...grpc.CallOption) (FacilitiesReservation_ListMeetingRoomReservationsClient, error)
	FindAvailableMeetingRooms(ctx context.Context, in *FindAvailableMeetingRoomsEvent, opts ...grpc.CallOption) (FacilitiesReservation_FindAvailableMeetingRoomsClient, error)
}

type facilitiesReservationClient struct {
	cc *grpc.ClientConn
}

func NewFacilitiesReservationClient(cc *grpc.ClientConn) FacilitiesReservationClient {
	return &facilitiesReservationClient{cc}
}

func (c *facilitiesReservationClient) ReserveMeetingRoom(ctx context.Context, in *ReserveMeetingRoomEvent, opts ...grpc.CallOption) (*ConfirmationEvent, error) {
	out := new(ConfirmationEvent)
	err := grpc.Invoke(ctx, "/facilities.FacilitiesReservation/reserveMeetingRoom", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *facilitiesReservationClient) ListMeetingRoomReservations(ctx context.Context, in *ListMeetingRoomReservationsEvent, opts ...grpc.CallOption) (FacilitiesReservation_ListMeetingRoomReservationsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_FacilitiesReservation_serviceDesc.Streams[0], c.cc, "/facilities.FacilitiesReservation/listMeetingRoomReservations", opts...)
	if err != nil {
		return nil, err
	}
	x := &facilitiesReservationListMeetingRoomReservationsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FacilitiesReservation_ListMeetingRoomReservationsClient interface {
	Recv() (*MeetingRoomReservation, error)
	grpc.ClientStream
}

type facilitiesReservationListMeetingRoomReservationsClient struct {
	grpc.ClientStream
}

func (x *facilitiesReservationListMeetingRoomReservationsClient) Recv() (*MeetingRoomReservation, error) {
	m := new(MeetingRoomReservation)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *facilitiesReservationClient) FindAvailableMeetingRooms(ctx context.Context, in *FindAvailableMeetingRoomsEvent, opts ...grpc.CallOption) (FacilitiesReservation_FindAvailableMeetingRoomsClient, error) {
	stream, err := grpc.NewClientStream(ctx, &_FacilitiesReservation_serviceDesc.Streams[1], c.cc, "/facilities.FacilitiesReservation/findAvailableMeetingRooms", opts...)
	if err != nil {
		return nil, err
	}
	x := &facilitiesReservationFindAvailableMeetingRoomsClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FacilitiesReservation_FindAvailableMeetingRoomsClient interface {
	Recv() (*MeetingRoom, error)
	grpc.ClientStream
}

type facilitiesReservationFindAvailableMeetingRoomsClient struct {
	grpc.ClientStream
}

func (x *facilitiesReservationFindAvailableMeetingRoomsClient) Recv() (*MeetingRoom, error) {
	m := new(MeetingRoom)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// Server API for FacilitiesReservation service

type FacilitiesReservationServer interface {
	ReserveMeetingRoom(context.Context, *ReserveMeetingRoomEvent) (*ConfirmationEvent, error)
	ListMeetingRoomReservations(*ListMeetingRoomReservationsEvent, FacilitiesReservation_ListMeetingRoomReservationsServer) error
	FindAvailableMeetingRooms(*FindAvailableMeetingRoomsEvent, FacilitiesReservation_FindAvailableMeetingRoomsServer) error
}

func RegisterFacilitiesReservationServer(s *grpc.Server, srv FacilitiesReservationServer) {
	s.RegisterService(&_FacilitiesReservation_serviceDesc, srv)
}

func _FacilitiesReservation_ReserveMeetingRoom_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ReserveMeetingRoomEvent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FacilitiesReservationServer).ReserveMeetingRoom(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/facilities.FacilitiesReservation/ReserveMeetingRoom",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FacilitiesReservationServer).ReserveMeetingRoom(ctx, req.(*ReserveMeetingRoomEvent))
	}
	return interceptor(ctx, in, info, handler)
}

func _FacilitiesReservation_ListMeetingRoomReservations_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(ListMeetingRoomReservationsEvent)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FacilitiesReservationServer).ListMeetingRoomReservations(m, &facilitiesReservationListMeetingRoomReservationsServer{stream})
}

type FacilitiesReservation_ListMeetingRoomReservationsServer interface {
	Send(*MeetingRoomReservation) error
	grpc.ServerStream
}

type facilitiesReservationListMeetingRoomReservationsServer struct {
	grpc.ServerStream
}

func (x *facilitiesReservationListMeetingRoomReservationsServer) Send(m *MeetingRoomReservation) error {
	return x.ServerStream.SendMsg(m)
}

func _FacilitiesReservation_FindAvailableMeetingRooms_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(FindAvailableMeetingRoomsEvent)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FacilitiesReservationServer).FindAvailableMeetingRooms(m, &facilitiesReservationFindAvailableMeetingRoomsServer{stream})
}

type FacilitiesReservation_FindAvailableMeetingRoomsServer interface {
	Send(*MeetingRoom) error
	grpc.ServerStream
}

type facilitiesReservationFindAvailableMeetingRoomsServer struct {
	grpc.ServerStream
}

func (x *facilitiesReservationFindAvailableMeetingRoomsServer) Send(m *MeetingRoom) error {
	return x.ServerStream.SendMsg(m)
}

var _FacilitiesReservation_serviceDesc = grpc.ServiceDesc{
	ServiceName: "facilities.FacilitiesReservation",
	HandlerType: (*FacilitiesReservationServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "reserveMeetingRoom",
			Handler:    _FacilitiesReservation_ReserveMeetingRoom_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "listMeetingRoomReservations",
			Handler:       _FacilitiesReservation_ListMeetingRoomReservations_Handler,
			ServerStreams: true,
		},
		{
			StreamName:    "findAvailableMeetingRooms",
			Handler:       _FacilitiesReservation_FindAvailableMeetingRooms_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "proto/facilitiesReservation.proto",
}

func init() { proto.RegisterFile("proto/facilitiesReservation.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 500 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0xac, 0x54, 0xed, 0x6a, 0x13, 0x41,
	0x14, 0xed, 0x6c, 0x93, 0x34, 0xb9, 0x7e, 0x94, 0x0e, 0xda, 0xae, 0x51, 0x43, 0x5c, 0xfb, 0x23,
	0x48, 0x89, 0xa2, 0xbe, 0x80, 0x2d, 0x16, 0x0a, 0x0d, 0x84, 0x45, 0x10, 0xfd, 0xe5, 0xec, 0xce,
	0x4d, 0x32, 0xb2, 0x3b, 0x13, 0x66, 0x26, 0x01, 0x9f, 0xc2, 0x77, 0xf2, 0x01, 0x7c, 0x21, 0xff,
	0xc8, 0x4e, 0x62, 0x76, 0x96, 0x7c, 0x81, 0xf4, 0x5f, 0xee, 0xb9, 0x27, 0x73, 0xcf, 0x39, 0x77,
	0x67, 0xe0, 0xc5, 0x54, 0x2b, 0xab, 0x5e, 0x8f, 0x58, 0x2a, 0x32, 0x61, 0x05, 0x9a, 0x18, 0x0d,
	0xea, 0x39, 0xb3, 0x42, 0xc9, 0xbe, 0xeb, 0x51, 0x28, 0x9b, 0xd1, 0x1f, 0x02, 0xf7, 0x06, 0x88,
	0x56, 0xc8, 0x71, 0xac, 0x54, 0x4e, 0x1f, 0x42, 0x20, 0x78, 0x48, 0xba, 0xa4, 0x57, 0x8f, 0x03,
	0xc1, 0x69, 0x07, 0x20, 0x99, 0x89, 0x8c, 0x0b, 0x39, 0xbe, 0xe1, 0x61, 0xe0, 0x70, 0x0f, 0xa1,
	0x8f, 0xa0, 0x3e, 0xca, 0x94, 0xd2, 0xe1, 0xa1, 0x6b, 0x2d, 0x0a, 0x4a, 0xa1, 0x26, 0x59, 0x8e,
	0x61, 0xad, 0x4b, 0x7a, 0xad, 0xd8, 0xfd, 0xa6, 0x6d, 0x68, 0xa6, 0x6c, 0xca, 0x52, 0x61, 0x7f,
	0x84, 0x75, 0x47, 0x5e, 0xd5, 0x34, 0x82, 0xfb, 0x13, 0x66, 0x86, 0x5a, 0x7d, 0xc7, 0xd4, 0x2a,
	0x1d, 0x36, 0xba, 0xa4, 0xd7, 0x8c, 0x2b, 0x18, 0x3d, 0x87, 0x07, 0x13, 0x66, 0x3e, 0x4f, 0x84,
	0xc5, 0x44, 0x31, 0xcd, 0xc3, 0x23, 0x47, 0xaa, 0x82, 0xf4, 0x02, 0x4e, 0x26, 0xcc, 0x5c, 0x29,
	0x39, 0x42, 0x8d, 0x32, 0xc5, 0x5b, 0x21, 0x31, 0x6c, 0x3a, 0xe6, 0x7a, 0x23, 0xfa, 0x45, 0xe0,
	0xd4, 0x73, 0xef, 0x45, 0xb5, 0x16, 0xc4, 0x29, 0x34, 0x66, 0x06, 0xf5, 0x2a, 0x84, 0x65, 0x55,
	0xc8, 0xca, 0xcb, 0x13, 0x6e, 0xf8, 0x32, 0x88, 0x2a, 0x48, 0x9f, 0x41, 0xcb, 0x58, 0xa6, 0xed,
	0x27, 0xb1, 0x4a, 0xa5, 0x04, 0x68, 0x08, 0x47, 0x28, 0xb9, 0xeb, 0xd5, 0x5d, 0xef, 0x5f, 0x59,
	0x04, 0x63, 0x45, 0x8e, 0x0b, 0x61, 0xc8, 0x5d, 0x30, 0xad, 0xb8, 0x82, 0x45, 0x3f, 0x09, 0x9c,
	0x2d, 0x0b, 0xcf, 0xcb, 0xc7, 0x39, 0x4a, 0xeb, 0xa9, 0x26, 0xbb, 0x55, 0x07, 0x7b, 0x55, 0x1f,
	0xee, 0x50, 0x5d, 0xab, 0xa8, 0x8e, 0xbe, 0x41, 0xf7, 0x56, 0x18, 0xbb, 0x39, 0x59, 0x73, 0x07,
	0xca, 0xa2, 0x29, 0x74, 0xae, 0x85, 0xe4, 0x1f, 0xe6, 0x4c, 0x64, 0x2c, 0xc9, 0x7c, 0xe3, 0x7b,
	0xce, 0xff, 0x5f, 0x4f, 0x5f, 0xe0, 0xa4, 0xf8, 0x78, 0x84, 0xce, 0x9d, 0x8b, 0xc5, 0x90, 0x0e,
	0x80, 0x46, 0x3b, 0xd3, 0xf2, 0x4a, 0x71, 0x5c, 0x0e, 0xf2, 0x90, 0xc2, 0x8c, 0xb1, 0xcc, 0xce,
	0xcc, 0x00, 0x8d, 0x61, 0x63, 0x74, 0x66, 0x5a, 0x71, 0x15, 0x7c, 0xfb, 0x3b, 0x80, 0xc7, 0xd7,
	0x9b, 0xee, 0x2b, 0xfd, 0x0a, 0x54, 0xaf, 0x6d, 0x96, 0xbe, 0xec, 0x97, 0x17, 0xb8, 0xbf, 0x65,
	0xf3, 0xed, 0xe7, 0x3e, 0x69, 0x4d, 0x79, 0x74, 0x40, 0x0d, 0x3c, 0xcd, 0xb6, 0x2f, 0x89, 0x5e,
	0xf8, 0xff, 0xdf, 0xb7, 0xcd, 0x76, 0xe4, 0xb3, 0x37, 0x33, 0xa3, 0x83, 0x37, 0x84, 0x72, 0x78,
	0x32, 0xda, 0xb6, 0x37, 0xfa, 0xca, 0x3f, 0x64, 0xf7, 0x7a, 0xdb, 0x67, 0x5b, 0x06, 0x16, 0x53,
	0x2e, 0xcf, 0xe1, 0x58, 0x98, 0xf7, 0x89, 0x47, 0xb9, 0x3c, 0x2e, 0x03, 0x1e, 0x16, 0x8f, 0xe0,
	0x90, 0x24, 0x0d, 0xf7, 0x1a, 0xbe, 0xfb, 0x1b, 0x00, 0x00, 0xff, 0xff, 0xcd, 0x62, 0xbc, 0xd8,
	0x32, 0x05, 0x00, 0x00,
}
